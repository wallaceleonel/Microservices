    - Regra de escoteiro 

        "Deixe sempre o acampamento mais limpo do que você entrou " O mesmo vale para o codigo
        Devolva sempre um codigo melhor do que o que vc recebeu.

    - Causa raiz 

        Sempre procure a causa raiz do problema, nunca resolva as coisas superficialmente.No dia-dia, temos que corrigir diversos problemas 
        porem não nos atentamos a causa raiz do problema o que gera um retrabalho.

    Regras de design

    - Mantenha dados de configuração em alto nível

        Algo que toda aplicação tem são suas configurações, como aas conhecidas 
        "ConnectionStrings" tente sempre deixar essas configurações em um alto nivel ou "parse" delas em um nivel mais alto possivel 
        Evite escrever metodos dentro de controllers ou algo do tipo. Se possivel mantenha esta passagem no método principal, no inicio da aplicação e não mexa ! 

    Exemplo:

        Crie uma classe 'Settings' no projeto base e depois no Startup das aplicações
        deixando centralizada configurações estaticas e não espalhadas pelo codigo.

       " MeuProjeto.Domain

        public static class Settings {
        public static string ConnectionString { get; set; }
        }
        
        "
        "
         MeuProjeto.Api

        public Startup(IConfiguration configuration)
        {
        Configuration = configuration;
        Settings.ConnectionString = Configuration.GetConnectionString("connectionString");
        }
        "
        "
        MeuProjeto.Infra

        using(var connection = new SqlConnection(Settings.ConnectionString)) {
            ...
        }
        "

    - Polimorfismo no lugar de IFs 

        Um IF  ou condicional como o propio nome diz, traz uma tomada de decisão a nossa aplicação, o que implica no aumento da 
        complexidade da mesma.No geral devemos evidar o uso excessivo destes.

        Nestes cenários,opte sempre pelo Polimorfismo ao invés de tomar decisão em todo método que cria.
    
    - Mult-thread

        Sempre que necessario ultilize processamento em threads separadas, já temos suporte a 
        multi-threads e paralelismo no C# o proprio Async/Await fazem isso.
        